html {
  background:#018DED url(http://unsplash.it/1632/1224?image=970&blur=50);
  background-size: cover;  /* keyword 'cover' tells the browser to make sure the image always covers the entire container, even if it has to stretch the image or cut a little bit off one of the edges.  */
  font-family: 'helvetica neue';
  text-align: center;
  font-size: 10px;
}

body {
  margin: 0;
  font-size: 2rem;
  display:flex;         /* Define <body> element as flex container. See more: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes */
  flex:1;               /* Let all the flexible items be the same length, regardless of its content: */
  min-height: 100vh;
  align-items: center;  /*The CSS align-items property defines how the browser distributes space between and around flex items along the cross-axis of their container. This means it works like justify-content but in the perpendicular direction.*/
}

.clock {
  width: 30rem;
  height: 30rem;
  border:20px solid white;
  border-radius:50%;
  margin:50px auto;     /* vertical & horizontal */
  position: relative;   /* The element is positioned relative to its normal position */
  padding:2rem;
  box-shadow:
    0 0 0 4px rgba(0,0,0,0.1),
    inset 0 0 0 3px #EFEFEF,      
    inset 0 0 10px black,
    0 0 10px rgba(0,0,0,0.2); /* The 'inset' keyword hanges the shadow from an outer shadow (outset) to an inner shadow */
                              /* You can comma separate box-shadow any many times as you like. 
                              For instance, this shows four shadows with different positions and 
                              different colors on the same element: */
}

.clock-face {
  position: relative;
  width: 100%;
  height: 100%;
  transform: translateY(-3px);  /* account for the height of the clock hands */
  
      /* The "transform" property applies a 2D or 3D transformation to an element. 
      This property allows you to rotate, scale, move, skew, etc., elements. 
      Keyword 'translateY(y)' Defines a translation, using only the value for the Y-axis */
}

.hand {
  width:50%;
  height:6px;
  background:black;
  position: absolute;
  top:50%;
  transform-origin:100%;  

      /* The transform-origin property is used in conjunction with CSS transforms, 
      letting you change the point of origin of a transform. 
      A therm "the point of origin" in russian means "нулевая точка в системе отчета; начало координаты". 
      See more: https://css-tricks.com/almanac/properties/t/transform-origin/
      */

  transform: rotate(90deg);
  transition: all 0.05s; 

      /* A dictionary definition of'transition' is "when something changes from one form or state to another".
      CSS transitions provide a way to control animation speed when changing CSS properties. 
      CSS transitions allows you to change property values smoothly (from one value to another), over a given duration.
      The shorthand CSS syntax is written as follows: 
      transition: <property> <duration> <timing-function> <delay>;
      */


  transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1);

      /* 
      The transition-timing-function property, normally used as part of transition shorthand, 
      is used to define a function that describes how a transition will proceed over its duration, 
      allowing a transition to change speed during its course. 
      
      These timing functions are commonly called easing functions, and can be defined using a predefined keyword value, 
      a stepping function, or a cubic Bézier curve.
      
      The predefined keyword values allowed are: ease, linear, ease-in, ease-out, ease-in-out, step-start, step-end

      Each of the predefined keywords has an equivalent cubic Bézier curve value or equivalent stepping function value.
      
      For more information see https://css-tricks.com/almanac/properties/t/transition-timing-function/
      */
}

.second-hand {
  height:1px;
  /*background: white;*/
}

.hour-hand {
  width: 45%;
  position: absolute;
  top:50%;  
  left:5%;
}
